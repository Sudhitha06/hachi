Here’s a *complete and clear example* of React components demonstrating both *State* and *Props*, along with explanation, output, and how to run it.

---

## *React Program: Props and State*

### **1. Using State (Counter.js)**

javascript
import React, { useState } from 'react';

function Counter() {
    const [count, setCount] = useState(0); // Initialize state with 0

    return (
        <div>
            <p>Count: {count}</p>
            <button onClick={() => setCount(count + 1)}>Increment</button>
        </div>
    );
}

export default Counter;


*Explanation:*

* useState(0) initializes the state variable count to 0.
* setCount updates the state when the button is clicked.
* Clicking the button triggers a re-render, showing the updated count.

*Output Example:*


Count: 0
[Increment Button]

After clicking Increment:
Count: 1
Count: 2
Count: 3
...


---

### **2. Using Props (App.js & Greeting.js)**

*Greeting.js*

javascript
import React from 'react';

function Greeting({ name }) {   // Receiving props
    return <h1>Hello, {name}!</h1>;
}

export default Greeting;


*App.js*

javascript
import React from 'react';
import Greeting from './Greeting';
import Counter from './Counter';  // Optional: include Counter to show state

function App() {
    return (
        <div>
            <Greeting name="Jiya" />  {/* Passing prop */}
            <Counter />               {/* Display state example */}
        </div>
    );
}

export default App;


*Explanation:*

* Greeting component receives a prop name and displays it.
* App passes "Jiya" as the value of name.
* Props are *read-only*; cannot be changed inside Greeting.

*Output Example:*


Hello, Jiya!
Count: 0
[Increment Button]


---

### *3. How to Run*

bash
# 1. Create React App (if not already)
npx create-react-app my-app
cd my-app

# 2. Replace src/App.js with the code above
# 3. Create src/Greeting.js with the code above
# 4. Create src/Counter.js with the code above

# 5. Start the app
npm start


*Browser will open at:* http://localhost:3000

*Result:*

* Greeting component shows personalized message using props.
* Counter component demonstrates dynamic state updates.

---

If you want, I can **combine both Counter and Greeting in a single file** so it’s easier to see *State + Props in one component* for a single example.

Do you want me to do that?
