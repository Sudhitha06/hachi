Sure! Let’s create a *complete React project example using CSS & Sass styling* with all necessary files, steps, commands, and expected output. This will be fully ready to run.

---

# *React CSS & Sass Styling Example*

---

## *1. Project Setup*

bash
# 1. Create a new React project using Vite
npx create-vite my-react-app --template react

# 2. Navigate to project folder
cd my-react-app

# 3. Install dependencies
npm install

# 4. Install Sass
npm install sass

# 5. Start the development server
npm run dev


*Open in browser:* http://localhost:5173/

---

## *2. Folder Structure*


my-react-app/
 ┣ public/
 ┃ ┗ index.html
 ┣ src/
 ┃ ┣ App.jsx
 ┃ ┣ App.css
 ┃ ┣ App.scss
 ┃ ┗ main.jsx
 ┗ package.json


---

## *3. public/index.html*

html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>React CSS & Sass Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


---

## *4. src/main.jsx*

javascript
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


---

## *5. src/App.jsx*

javascript
import React from "react";
import "./App.css";   // Import normal CSS
import "./App.scss";  // Import Sass/SCSS

function App() {
  const fruits = ["Apple", "Banana", "Cherry", "Mango", "Orange"];

  return (
    <div className="container">
      <h1 className="title">Fruit List</h1>
      <ul className="data-list">
        {fruits.map((fruit, index) => (
          <li key={index}>{fruit}</li>
        ))}
      </ul>
    </div>
  );
}

export default App;


---

## *6. src/App.css*

css
.container {
  text-align: center;
  background-color: #f9f9f9;
  padding: 20px;
}

.title {
  color: #2c3e50;
  font-size: 2rem;
}


---

## *7. src/App.scss*

scss
$list-color: #27ae60;

.data-list {
  list-style: none;
  padding: 0;

  li {
    background: lighten($list-color, 30%);
    margin: 8px 0;
    padding: 10px;
    border-radius: 6px;
    font-weight: bold;

    &:hover {
      background: darken($list-color, 10%);
      color: #fff;
      cursor: pointer;
    }
  }
}


---

## *8. How It Works*

1. *App.jsx* imports *App.css* and *App.scss* for styling.
2. The fruits array is mapped to <li> elements dynamically.
3. *App.css* provides basic styling (alignment, background, title color).
4. *App.scss* uses Sass features:

   * Variable $list-color
   * Nested rules for li
   * Hover effect with color change and darken/lighten functions

---

## *9. Execution Steps*

bash
# Inside project folder
npm install
npm install sass
npm run dev


* Open browser: http://localhost:5173/

---

## *10. Output*

* Page displays heading: Fruit List
* Below heading, a list of fruits appears:

  
  Apple
  Banana
  Cherry
  Mango
  Orange
  
* Hover effect: Background darkens, text becomes white, cursor pointer.
* Container is centered with light background.

---

✅ This example demonstrates *how to integrate CSS & Sass* in a React project and dynamically display a styled list.

---

If you want, I can *combine this Sass & CSS example with the React Event Handling and Props/State example into a single project* so you have *one full project with all React concepts together*.

Do you want me to do that?

